<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Spew13 â€” Gambling Room</title>
<style>
  :root{
    --bg:#070707;
    --panel:#121212;
    --accent:#00ff88;
    --muted:#9fbf9f;
    --card-bg:#fff;
  }
  html,body{height:100%;margin:0;background:radial-gradient(circle at 10% 10%, #07110a 0%, #050505 40%, #000 100%);font-family:Inter, system-ui, Arial, sans-serif;color:#eaf9ea;}
  header{padding:18px 24px;background:#0b0b0b;border-bottom:3px solid rgba(0,255,136,0.08);display:flex;align-items:center;justify-content:space-between;gap:12px}
  header h1{margin:0;font-size:1.25rem;color:var(--accent)}
  .controls {display:flex;gap:10px;align-items:center;}
  button{cursor:pointer}
  .btn {background:#111;border:1px solid rgba(255,255,255,0.06);color:#fff;padding:8px 12px;border-radius:8px;}
  .btn.primary{background:linear-gradient(180deg,#053d1d,#032b11);border:1px solid rgba(0,255,136,0.25);box-shadow:0 6px 20px rgba(0,255,136,0.04)}
  .btn.warn{background:#331211;border:1px solid rgba(255,80,80,0.15)}
  main{max-width:1080px;margin:28px auto;padding:0 18px;}
  .top-row{display:flex;justify-content:space-between;align-items:center;gap:10px;flex-wrap:wrap}
  .balance{background:rgba(0,0,0,0.45);padding:10px 14px;border-radius:10px;border:1px solid rgba(255,255,255,0.04);font-weight:600}
  .game-grid{display:grid;grid-template-columns:1fr 1fr;gap:18px;margin-top:22px}
  .panel{background:linear-gradient(180deg,#0f0f0f,#0b0b0b);padding:16px;border-radius:12px;border:1px solid rgba(255,255,255,0.04);box-shadow:0 10px 30px rgba(0,0,0,0.6)}
  .panel h2{margin:0 0 8px;color:var(--accent)}
  .muted{color:var(--muted);font-size:0.95rem}
  .controls-row{display:flex;gap:8px;align-items:center;margin-top:12px;flex-wrap:wrap}
  input[type=number]{padding:8px;border-radius:8px;border:1px solid #333;background:#0b0b0b;color:#fff;width:100px}
  .table{background:linear-gradient(90deg,#07210b,#061610);padding:12px;border-radius:10px;min-height:86px;color:#fff}
  .card{display:inline-block;width:48px;height:72px;border-radius:6px;background:var(--card-bg);color:#000;text-align:center;line-height:72px;font-weight:700;margin-right:6px;box-shadow:0 6px 18px rgba(0,0,0,0.6)}
  .poker-card{display:inline-block;width:56px;height:84px;border-radius:8px;background:var(--card-bg);color:#000;text-align:center;line-height:84px;font-weight:700;margin-right:8px;box-shadow:0 6px 18px rgba(0,0,0,0.6);cursor:pointer}
  .poker-card.held{outline:3px solid rgba(0,255,136,0.25);background:#dfffd9}
  .status{margin-left:8px;color:#dfe; font-weight:600}
  footer{margin-top:24px;padding:18px;text-align:center;color:rgba(255,255,255,0.45);font-size:0.95rem}
  .close-btn{background:#111;border:1px solid rgba(255,255,255,0.06);padding:8px 12px;border-radius:8px;color:#fff}
  @media (max-width:880px){ .game-grid{grid-template-columns:1fr} .card{width:40px;height:60px;line-height:60px} .poker-card{width:48px;height:72px;line-height:72px} }
</style>
</head>
<body>
  <header>
    <h1>Spew13 â€” Gambling Room</h1>
    <div class="controls">
      <div class="balance" id="balanceDisplay">Spew Coins: 0</div>
      <button class="btn" id="saveBtn">Save</button>
      <button class="btn" id="resetBtn" title="Reset local Spew Coins">Reset</button>
      <button class="close-btn" id="closeBtn">Close</button>
    </div>
  </header>

  <main>
    <div class="top-row">
      <div>
        <div class="muted">Welcome â€” virtual currency only. No real money.</div>
        <div style="margin-top:6px;color:#cfeecf">Have fun and gamble responsibly.</div>
      </div>
      <div class="muted" style="text-align:right">Auto-save every 20s â€¢ Data stored in browser</div>
    </div>

    <div class="game-grid">
      <!-- BLACKJACK -->
      <section class="panel" id="blackjackPanel">
        <h2>Blackjack (simple)</h2>
        <div class="muted">Bet amount</div>
        <div class="controls-row">
          <input id="bjBet" type="number" value="10" min="1" />
          <button class="btn primary" id="bjDeal">Deal</button>
          <button class="btn" id="bjHit" disabled>Hit</button>
          <button class="btn" id="bjStand" disabled>Stand</button>
          <div class="status" id="bjStatus">Ready</div>
        </div>

        <div style="margin-top:12px">
          <div class="muted">Player</div>
          <div id="bjPlayer" class="table"></div>
          <div class="muted" style="margin-top:8px">Dealer</div>
          <div id="bjDealer" class="table"></div>
        </div>
      </section>

      <!-- POKER -->
      <section class="panel" id="pokerPanel">
        <h2>5-Card Draw Poker (simplified)</h2>
        <div class="muted">Bet amount</div>
        <div class="controls-row">
          <input id="pokerBet" type="number" value="10" min="1" />
          <button class="btn primary" id="pokerDeal">Deal</button>
          <button class="btn" id="pokerDraw" disabled>Draw (then resolve)</button>
          <div class="status" id="pokerStatus">Ready</div>
        </div>

        <div style="margin-top:12px">
          <div class="muted">Your hand (click cards to hold/unhold)</div>
          <div id="pokerPlayer" style="margin-top:10px"></div>

          <div class="muted" style="margin-top:12px">Dealer's hand</div>
          <div id="pokerDealer" style="margin-top:10px"></div>
        </div>
      </section>
    </div>

    <footer>Spew13 Gambling Demo â€” virtual Spew Coins only â€” Â© Green Iguana & AR Studios</footer>
  </main>

<script>
/* ----------------- Spew Coins (triple Base64) ----------------- */
const STORAGE_KEY = 'spewCoins_v1';
let spewCoins = 0;

function encodeTriple(obj){
  let s = JSON.stringify(obj);
  for(let i=0;i<3;i++) s = btoa(s);
  return s;
}
function decodeTriple(s){
  try{
    for(let i=0;i<3;i++) s = atob(s);
    return JSON.parse(s);
  }catch(e){
    console.warn('decode failed',e);
    return {amount:0};
  }
}

function saveSpew(){
  try {
    localStorage.setItem(STORAGE_KEY, encodeTriple({ amount: spewCoins }));
    flashSave();
  } catch(e) { console.warn('save error', e); }
  updateBalance();
}
function loadSpew(){
  const raw = localStorage.getItem(STORAGE_KEY);
  if(!raw){
    spewCoins = 100; // seed for new users
    saveSpew();
    return;
  }
  const obj = decodeTriple(raw);
  spewCoins = obj.amount || 0;
  updateBalance();
}
function updateBalance(){
  const el = document.getElementById('balanceDisplay');
  if(el) el.textContent = `Spew Coins: ${spewCoins}`;
}
function changeCoins(delta){
  spewCoins = Math.max(0, Math.floor(spewCoins + delta));
  updateBalance();
}

function flashSave(){
  const btn = document.getElementById('saveBtn');
  const orig = btn.style.background;
  btn.style.background = 'linear-gradient(90deg,#0a3,#063)';
  setTimeout(()=> btn.style.background = orig, 400);
}

document.getElementById('saveBtn').addEventListener('click', saveSpew);
document.getElementById('resetBtn').addEventListener('click', ()=>{
  if(confirm('Reset Spew Coins to default (100)?')) {
    spewCoins = 100;
    saveSpew();
    updateBalance();
  }
});

/* auto-save */
setInterval(()=> saveSpew(), 20000);

/* ----------------- Messaging to parent ----------------- */
document.getElementById('closeBtn').addEventListener('click', ()=>{
  // send postMessage to parent to close iframe overlay if parent listens
  try {
    parent.postMessage({ type:'closeGambling' }, '*');
  } catch(e){ /* ignore cross-domain */ }
  // if not in iframe, just hide entire document body
  if(window.self === window.top){
    document.body.style.display = 'none';
  }
});

/* Also listen for messages (optional): set coins from parent */
window.addEventListener('message', (ev)=>{
  if(!ev.data) return;
  if(ev.data.type === 'setSpewCoins' && typeof ev.data.amount === 'number'){
    spewCoins = Math.max(0, Math.floor(ev.data.amount));
    saveSpew();
    updateBalance();
  }
});

/* ----------------- Utility: deck functions ----------------- */
const SUITS = ['â™ ','â™¥','â™¦','â™£'];
const RANKS = ['A','2','3','4','5','6','7','8','9','10','J','Q','K'];

function newDeck(){
  const deck = [];
  for(const s of SUITS) for(const r of RANKS) deck.push({r,s});
  // fisher-yates shuffle
  for(let i=deck.length-1;i>0;i--){
    const j = Math.floor(Math.random()*(i+1));
    [deck[i], deck[j]] = [deck[j], deck[i]];
  }
  return deck;
}
function cardValueForBlackjack(r){
  if(r==='A') return 11;
  if(['J','Q','K'].includes(r)) return 10;
  return parseInt(r,10);
}
function scoreBJ(cards){
  let total=0, aces=0;
  for(const c of cards){
    total += cardValueForBlackjack(c.r);
    if(c.r === 'A') aces++;
  }
  while(total>21 && aces>0){ total -= 10; aces--; }
  return total;
}

/* ----------------- Blackjack logic ----------------- */
(function(){
  const playerDiv = document.getElementById('bjPlayer');
  const dealerDiv = document.getElementById('bjDealer');
  const status = document.getElementById('bjStatus');
  const betInput = document.getElementById('bjBet');
  const btnDeal = document.getElementById('bjDeal');
  const btnHit = document.getElementById('bjHit');
  const btnStand = document.getElementById('bjStand');

  let deck = [], playerHand = [], dealerHand = [], currentBet = 0, roundActive = false;

  function renderCards(container, cards, hideFirst=false){
    container.innerHTML = '';
    for(let i=0;i<cards.length;i++){
      const c = cards[i];
      const el = document.createElement('div');
      el.className = 'card';
      if(hideFirst && i===0){
        el.textContent = 'ðŸ‚ ';
        el.style.background = '#303030';
        el.style.color = '#fff';
      } else {
        el.textContent = c.r + c.s;
        el.style.background = '#fff';
        el.style.color = (c.s==='â™¥' || c.s==='â™¦') ? '#b00' : '#000';
      }
      container.appendChild(el);
    }
  }

  function endRound(message, netChange){
    roundActive = false;
    btnHit.disabled = true;
    btnStand.disabled = true;
    btnDeal.disabled = false;
    if(netChange !== 0) changeCoins(netChange);
    status.textContent = message;
  }

  function dealerPlayAndResolve(){
    // reveal dealer, hit to 17+
    renderCards(dealerDiv, dealerHand, false);
    let ds = scoreBJ(dealerHand);
    while(ds < 17){
      dealerHand.push(deck.pop()); ds = scoreBJ(dealerHand);
    }
    const ps = scoreBJ(playerHand);
    // outcomes
    if(ps > 21){
      endRound('You busted â€” lose', 0); // bet already removed
    } else if(ds > 21 || ps > ds){
      // player wins: pay 1x bet (net +bet)
      endRound('You win!', currentBet);
    } else if(ps === ds){
      // push: return bet
      endRound('Push (tie)', 0 + currentBet); // return bet
    } else {
      endRound('Dealer wins', 0);
    }
  }

  btnDeal.addEventListener('click', ()=>{
    if(roundActive) return;
    const bet = Math.max(1, Math.floor(Number(betInput.value) || 0));
    if(bet > spewCoins){
      status.textContent = 'Not enough Spew Coins.';
      return;
    }
    currentBet = bet;
    // deduct bet upfront
    changeCoins(-currentBet);

    deck = newDeck();
    playerHand = [deck.pop(), deck.pop()];
    dealerHand = [deck.pop(), deck.pop()];
    roundActive = true;
    btnDeal.disabled = true;
    btnHit.disabled = false;
    btnStand.disabled = false;
    renderCards(playerDiv, playerHand, false);
    renderCards(dealerDiv, dealerHand, true);
    const ps = scoreBJ(playerHand);
    if(ps === 21){
      // blackjack: pay 1.5x (rounded down)
      const bonus = Math.floor(currentBet * 1.5);
      changeCoins(currentBet + bonus);
      renderCards(dealerDiv, dealerHand, false);
      endRound('Blackjack! You win.', currentBet + bonus);
    } else {
      status.textContent = 'Your move';
    }
  });

  btnHit.addEventListener('click', ()=>{
    if(!roundActive) return;
    playerHand.push(deck.pop());
    renderCards(playerDiv, playerHand, false);
    const ps = scoreBJ(playerHand);
    if(ps > 21){
      renderCards(dealerDiv, dealerHand, false);
      endRound('Bust â€” you lose', 0);
    } else status.textContent = 'Your move';
  });

  btnStand.addEventListener('click', ()=>{
    if(!roundActive) return;
    btnHit.disabled = true;
    btnStand.disabled = true;
    dealerPlayAndResolve();
  });

  // initial render
  renderCards(playerDiv, []);
  renderCards(dealerDiv, []);
})();

/* ----------------- Poker (5-card draw) ----------------- */
(function(){
  const playerDiv = document.getElementById('pokerPlayer');
  const dealerDiv = document.getElementById('pokerDealer');
  const btnDeal = document.getElementById('pokerDeal');
  const btnDraw = document.getElementById('pokerDraw');
  const status = document.getElementById('pokerStatus');
  const betInput = document.getElementById('pokerBet');

  const RANK_ORDER = ['2','3','4','5','6','7','8','9','10','J','Q','K','A'];

  function makeDeck(){ // shuffled
    const deck = [];
    for(const s of SUITS) for(const r of RANKS) deck.push({r,s});
    for(let i=deck.length-1;i>0;i--){ const j=Math.floor(Math.random()*(i+1)); [deck[i],deck[j]]=[deck[j],deck[i]]; }
    return deck;
  }

  function label(c){ return c.r + c.s; }

  function evaluateHand(cards){
    // returns [rankScore, tiebreakerArray]
    // rankScore: 8 straight flush, 7 four, 6 full house, 5 flush, 4 straight, 3 three, 2 two-pair,1 pair,0 high
    const counts = {};
    const suits = {};
    const vals = cards.map(c=>RANK_ORDER.indexOf(c.r)).sort((a,b)=>a-b);
    cards.forEach(c=>{ counts[c.r]=(counts[c.r]||0)+1; suits[c.s]=(suits[c.s]||0)+1; });
    const isFlush = Object.values(suits).some(v=>v===5);
    // straight check
    let isStraight=false;
    let consecutive=true;
    for(let i=1;i<vals.length;i++){ if(vals[i]!==vals[i-1]+1){ consecutive=false; break; } }
    if(consecutive) isStraight=true;
    // A-2-3-4-5 low straight
    const aceLow = [0,1,2,3,12];
    if(vals.join(',') === aceLow.join(',')) isStraight=true;

    const groups = Object.values(counts).sort((a,b)=>b-a);
    const rankEntries = Object.entries(counts).map(([r,c])=>({r,c,v:RANK_ORDER.indexOf(r)}));
    rankEntries.sort((a,b)=> (b.c - a.c) || (b.v - a.v));
    const tie = rankEntries.map(e=>e.v);

    if(isStraight && isFlush) return [8,tie];
    if(groups[0]===4) return [7,tie];
    if(groups[0]===3 && groups[1]===2) return [6,tie];
    if(isFlush) return [5,tie];
    if(isStraight) return [4,tie];
    if(groups[0]===3) return [3,tie];
    if(groups[0]===2 && groups[1]===2) return [2,tie];
    if(groups[0]===2) return [1,tie];
    return [0,tie];
  }

  function compareEval(a,b){
    if(a[0] !== b[0]) return a[0] - b[0];
    const ta = a[1], tb = b[1];
    for(let i=0;i<Math.max(ta.length,tb.length);i++){
      const av = ta[i] || -1, bv = tb[i] || -1;
      if(av !== bv) return av - bv;
    }
    return 0;
  }

  let deck=[], playerHand=[], dealerHand=[], holds=[false,false,false,false,false], roundActive=false, redrawUsed=false, currentBet=0;

  function renderHands(hideDealer=true){
    playerDiv.innerHTML = '';
    playerHand.forEach((c,i)=>{
      const el = document.createElement('div');
      el.className = 'poker-card' + (holds[i] ? ' held' : '');
      el.textContent = label(c);
      el.addEventListener('click', ()=> {
        if(!roundActive || redrawUsed) return;
        holds[i] = !holds[i]; renderHands(hideDealer);
      });
      playerDiv.appendChild(el);
    });
    dealerDiv.innerHTML = '';
    dealerHand.forEach((c)=>{
      const el = document.createElement('div');
      el.className = 'poker-card';
      if(hideDealer){ el.textContent = 'ðŸ‚ '; el.style.background = '#333'; el.style.color='#fff'; }
      else el.textContent = label(c);
      dealerDiv.appendChild(el);
    });
  }

  btnDeal.addEventListener('click', ()=>{
    if(roundActive) return;
    const bet = Math.max(1, Math.floor(Number(betInput.value) || 0));
    if(bet > spewCoins){ status.textContent = 'Not enough Spew Coins.'; return; }
    currentBet = bet;
    changeCoins(-currentBet); // deduct upfront
    deck = makeDeck(); playerHand = [deck.pop(),deck.pop(),deck.pop(),deck.pop(),deck.pop()];
    dealerHand = [deck.pop(),deck.pop(),deck.pop(),deck.pop(),deck.pop()];
    holds = [false,false,false,false,false];
    roundActive = true; redrawUsed = false;
    btnDraw.disabled = false; btnDeal.disabled = true;
    status.textContent = 'Select cards to hold (click) then Draw';
    renderHands(true);
  });

  btnDraw.addEventListener('click', ()=>{
    if(!roundActive || redrawUsed) return;
    // replace non-held
    for(let i=0;i<5;i++) if(!holds[i]) playerHand[i] = deck.pop();
    redrawUsed = true;
    // reveal dealer and evaluate
    renderHands(false);
    const pEval = evaluateHand(playerHand);
    const dEval = evaluateHand(dealerHand);
    const cmp = compareEval(pEval, dEval);
    // simple payouts: win => +bet, push => return bet, lose => nothing
    if(cmp > 0){
      changeCoins(currentBet * 2); // return bet + win = net +bet
      status.textContent = 'You win! ' + handName(pEval[0]);
    } else if(cmp === 0){
      changeCoins(currentBet); // return bet
      status.textContent = 'Push (tie). ' + handName(pEval[0]);
    } else {
      status.textContent = 'You lose. ' + handName(dEval[0]);
    }
    roundActive = false; btnDeal.disabled = false; btnDraw.disabled = true;
  });

  function handName(score){
    switch(score){
      case 8: return 'Straight Flush';
      case 7: return 'Four of a Kind';
      case 6: return 'Full House';
      case 5: return 'Flush';
      case 4: return 'Straight';
      case 3: return 'Three of a Kind';
      case 2: return 'Two Pair';
      case 1: return 'One Pair';
      default: return 'High Card';
    }
  }

  // initial render
  playerDiv.innerHTML = ''; dealerDiv.innerHTML = ''; btnDraw.disabled = true;
})();

/* ----------------- Init load ----------------- */
loadSpew();
updateBalance();
</script>
</body>
</html>
